[
 {
  "docstatus": 0,
  "doctype": "Client Script",
  "dt": "Work Order",
  "enabled": 1,
  "modified": "2024-11-22 10:43:38.415711",
  "module": "Sonali",
  "name": "Defaults in Work Order",
  "script": "frappe.ui.form.on('Work Order', {\r\n    before_save: function(frm) {\r\n        // Loop through each row in the Operations child table\r\n        frm.doc.operations.forEach(row => {\r\n            if (!row.workstation) { // Only set if workstation is not already defined\r\n                row.workstation = \"Work - 3\"; // Replace with your default workstation name\r\n            }\r\n        });\r\n        frm.refresh_field('operations'); // Refresh the table to reflect changes\r\n    }\r\n});",
  "view": "Form"
 },
 {
  "docstatus": 0,
  "doctype": "Client Script",
  "dt": "Job Card",
  "enabled": 1,
  "modified": "2024-12-12 12:22:50.274980",
  "module": "Sonali",
  "name": "Dynamic Filtering on link field on Job card",
  "script": "frappe.ui.form.on(\"Job Card\", {\r\n    refresh: function(frm) {\r\n        let operation = frm.doc.operation;\r\n        if (operation === \"Packaging\") {\r\n                group = \"Packaging Team\";\r\n            } \r\n        else if (operation === \"Annealing\") {\r\n                group = \"Annealing Team\";\r\n            } \r\n        else if (operation === \"Bunching\") {\r\n                group = \"Bunching Team\";\r\n            } \r\n        else if (operation === \"Insulation\") {\r\n                group = \"Insulation Team\";\r\n            }\r\n        frm.set_query('employee', () => {\r\n    return {\r\n        filters: {\r\n            custom_employee_group: group\r\n        }\r\n    };\r\n        });\r\n    }\r\n});",
  "view": "Form"
 },
 {
  "docstatus": 0,
  "doctype": "Client Script",
  "dt": "Bulk Coupon",
  "enabled": 1,
  "modified": "2024-12-31 15:57:00.538523",
  "module": "Sonali",
  "name": "Bulk coupon code",
  "script": "frappe.listview_settings['Bulk Coupon'] = {\r\n    onload: function(listview) {\r\n        listview.page.add_inner_button(__('Create Bulk Data'), function() {\r\n            frappe.prompt([\r\n                {\r\n                    fieldname: 'number_of_coupons',\r\n                    label: 'Number of Coupons',\r\n                    fieldtype: 'Int',\r\n                    reqd: 1\r\n                },\r\n                {\r\n                    fieldname: 'coupon_amount',\r\n                    label: 'Coupon Amount',\r\n                    fieldtype: 'Int',\r\n                    reqd: 1\r\n                }\r\n            ], function(values) {\r\n                frappe.call({\r\n                    method: 'sonali.custom_functions.Bulk_coupon.create_bulk_data',\r\n                    args: {\r\n                        number_of_coupons: values.number_of_coupons,\r\n                        coupon_amount: values.coupon_amount\r\n                    },\r\n                    callback: function(response) {\r\n                        if (response.message) {\r\n                            frappe.msgprint(__('Bulk data created successfully!'));\r\n                            listview.refresh();\r\n                        }\r\n                    }\r\n                });\r\n            }, __('Create Bulk Data'), __('Create'));\r\n        });\r\n    }\r\n};\r\n",
  "view": "List"
 },
 {
  "docstatus": 0,
  "doctype": "Client Script",
  "dt": "Packaging Batch",
  "enabled": 1,
  "modified": "2025-02-11 14:14:58.870405",
  "module": null,
  "name": "Packaging Batch",
  "script": "frappe.ui.form.on('Packaging Batch', {\r\n    refresh: function(frm) {\r\n        // Update the serial_no query when the form is refreshed\r\n        set_serial_no_query(frm);\r\n    },\r\n    item_name: function(frm) {\r\n        // When the item_name field changes, update the query\r\n        set_serial_no_query(frm);\r\n        // Optionally refresh the child table to immediately show the effect\r\n        frm.refresh_field('serial_nos');\r\n    }\r\n});\r\n\r\nfunction set_serial_no_query(frm) {\r\n    // Ensure the child table exists before setting the query\r\n    if (frm.fields_dict['serial_nos']) {\r\n        if (frm.doc.item_name) {\r\n            // If an item is selected, apply the filter on item_code\r\n            frm.fields_dict['serial_nos'].grid.get_field('serial_no').get_query = function(doc, cdt, cdn) {\r\n                return {\r\n                    filters: {\r\n                        item_code: frm.doc.item_name\r\n                    }\r\n                };\r\n            };\r\n        } else {\r\n            // If no item is selected, remove the custom query to show all Serial No records\r\n            frm.fields_dict['serial_nos'].grid.get_field('serial_no').get_query = null;\r\n        }\r\n    } else {\r\n        console.warn(\"Child table field 'serial_nos' not found. Please verify the fieldname.\");\r\n    }\r\n}\r\n\r\n\r\nfrappe.ui.form.on('Serial for custom Batch', {\r\n\trefresh(frm) {\r\n\t\t// your code here\r\n\t}\r\n})",
  "view": "Form"
 },
 {
  "docstatus": 0,
  "doctype": "Client Script",
  "dt": "Packaging Batch",
  "enabled": 1,
  "modified": "2025-02-11 14:23:16.474037",
  "module": null,
  "name": "Sync packaging batch with Serial No",
  "script": "frappe.ui.form.on(\"Serial for custom Batch\", {\r\n    weight: function(frm, cdt, cdn) {  \r\n        let row = locals[cdt][cdn]; // Get the child table row\r\n\r\n        if (row.serial_no && row.weight) {\r\n            frappe.call({\r\n                method: \"frappe.client.set_value\",\r\n                args: {\r\n                    doctype: \"Serial No\",\r\n                    name: row.serial_no,  // Serial No document name\r\n                    fieldname: \"custom_weight\",\r\n                    value: row.weight\r\n                },\r\n                callback: function(response) {\r\n                    if (!response.exc) {\r\n                        frappe.show_alert({message: __(\"Serial No updated!\"), indicator: \"green\"});\r\n                    }\r\n                }\r\n            });\r\n        } else {\r\n            frappe.msgprint(__(\"Please ensure Serial No and Weight are set in the row.\"));\r\n        }\r\n    },\r\n    length: function(frm, cdt, cdn) {  \r\n        let row = locals[cdt][cdn]; // Get the child table row\r\n\r\n        if (row.serial_no && row.length) {\r\n            frappe.call({\r\n                method: \"frappe.client.set_value\",\r\n                args: {\r\n                    doctype: \"Serial No\",\r\n                    name: row.serial_no,  // Serial No document name\r\n                    fieldname: \"custom_length\",\r\n                    value: row.length\r\n                },\r\n                callback: function(response) {\r\n                    if (!response.exc) {\r\n                        frappe.show_alert({message: __(\"Serial No updated!\"), indicator: \"green\"});\r\n                    }\r\n                }\r\n            });\r\n        } else {\r\n            frappe.msgprint(__(\"Please ensure Serial No and Weight are set in the row.\"));\r\n        }\r\n    }\r\n});\r\n",
  "view": "Form"
 },
 {
  "docstatus": 0,
  "doctype": "Client Script",
  "dt": "Packaging Batch",
  "enabled": 1,
  "modified": "2025-02-18 11:56:08.689766",
  "module": null,
  "name": "Fetch Item Price on Packaging",
  "script": "frappe.ui.form.on('Packaging Batch', {\r\n    item_name: function(frm) {  // Trigger when item_name is selected/changed\r\n        if (!frm.doc.item_name) return; // Ensure item_name is not empty\r\n\r\n        frappe.call({\r\n            method: \"frappe.client.get_value\",\r\n            args: {\r\n                doctype: \"Item Price\",\r\n                filters: {\r\n                    item_code: frm.doc.item_name,  // Ensure item_name is actually the Item Code\r\n                    selling: 1 // Fetch selling price only\r\n                },\r\n                fieldname: \"price_list_rate\"\r\n            },\r\n            callback: function(r) {\r\n                if (r.message) {\r\n                    frm.set_value(\"item_price\", r.message.price_list_rate); // Set the fetched price\r\n                    frm.refresh_field(\"item_price\"); // Ensure UI updates\r\n                    console.log(\"Price Updated:\", r.message.price_list_rate);\r\n                } else {\r\n                    frappe.msgprint(__(\"No Price Found for the selected Item\"));\r\n                }\r\n            }\r\n        });\r\n    }\r\n});\r\n",
  "view": "Form"
 },
 {
  "docstatus": 0,
  "doctype": "Client Script",
  "dt": "Work Order",
  "enabled": 1,
  "modified": "2025-02-27 15:53:44.290570",
  "module": null,
  "name": "Buttons on Work Order",
  "script": "frappe.ui.form.on('Work Order', {\r\n    refresh: function(frm) {\r\n        if (frm.doc.docstatus === 1) { // Ensure it's submitted\r\n            frm.add_custom_button('Create HW PACKING', function() {\r\n                frappe.new_doc('HW PACKING', {\r\n                    work_order: frm.doc.name // Pass the Work Order ID\r\n                });\r\n            }, __('Create'));\r\n            frm.add_custom_button('Create SWW PACKING', function() {\r\n                frappe.new_doc('SWW PACKING', {\r\n                    sww_work_order: frm.doc.name // Pass the Work Order ID\r\n                });\r\n            }, __('Create'));\r\n        }\r\n    }\r\n});",
  "view": "Form"
 },
 {
  "docstatus": 0,
  "doctype": "Client Script",
  "dt": "HW PACKING",
  "enabled": 1,
  "modified": "2025-02-27 15:09:30.709319",
  "module": null,
  "name": "HW LABEL PRINT",
  "script": "frappe.ui.form.on('HW PACKING', {\r\n    work_order: function(frm) {\r\n        console.log(\"triggered\")\r\n        if (frm.doc.work_order) {\r\n            frappe.call({\r\n                method: \"sonali.sonali.doctype.hw_packing.hw_packing.fetch_stock_entries\",\r\n                args: {\r\n                    work_order: frm.doc.work_order\r\n                },\r\n                callback: function(r) {\r\n                    if (r.message) {\r\n                        console.log(r.message)\r\n                        frm.clear_table(\"batch_bundle_table\"); // Replace with your child table fieldname\r\n                        r.message.forEach(row => {\r\n                            let child = frm.add_child(\"batch_bundle_table\");\r\n                            child.batch_no = row.batch_no;\r\n                            child.item_code = row.item_code;\r\n                            child.quantity = row.quantity;\r\n                        });\r\n                        frm.refresh_field(\"batch_bundle_table\");\r\n                    }\r\n                }\r\n            });\r\n        }\r\n    }\r\n});",
  "view": "Form"
 },
 {
  "docstatus": 0,
  "doctype": "Client Script",
  "dt": "SWW PACKING",
  "enabled": 1,
  "modified": "2025-02-27 20:07:11.680426",
  "module": null,
  "name": "SWW LABEL PRINT",
  "script": "frappe.ui.form.on('SWW PACKING', {\r\n    sww_work_order: function(frm) {\r\n        if (frm.doc.sww_work_order) {\r\n            frappe.call({\r\n                method: \"sonali.sonali.doctype.sww_packing.sww_packing.fetch_stock_entries\",\r\n                args: {\r\n                    work_order: frm.doc.sww_work_order\r\n                },\r\n                callback: function(r) {\r\n                    if (r.message) {\r\n                        console.log(r.message[0])\r\n                        frm.clear_table(\"sww_table\");\r\n                        \r\n                        if(r.message[0].total_qty > 0)\r\n                        {\r\n                            test = 0;\r\n                            n = -1;\r\n                            r.message[1].serial_nos.forEach(row => {\r\n                                if(test % 4 == 0)\r\n                                {\r\n                                    n = n+1\r\n                                }\r\n                                if (row) {\r\n                                        test = test + 1;\r\n                                        let child = frm.add_child(\"sww_table\");\r\n                                        child.serial_no = row;\r\n                                        child.master_box = r.message[0].serial_nos[n];\r\n                                        child.weight = \"\";\r\n                                        child.length = \"\";\r\n                                } else {\r\n                                    console.warn(`No serial numbers found for item: ${row.item_code}`);\r\n                                }\r\n                                console.log(n, r.message[0].serial_nos[n])\r\n                            });\r\n                        }\r\n                        if(r.message[1].total_qty > 0)\r\n                        {\r\n                            test = 0;\r\n                            n = -1;\r\n                            r.message[0].serial_nos.forEach(row => {\r\n                                if(test % 4 == 0)\r\n                                {\r\n                                    n = n+1\r\n                                }\r\n                            if (row) {\r\n                                    let child = frm.add_child(\"sww_table\");\r\n                                    child.serial_no = row;\r\n                                    child.master_box = r.message[1].serial_nos[n];\r\n                                    child.weight = \"\";\r\n                                    child.length = \"\";\r\n                            } else {\r\n                                console.warn(`No serial numbers found for item: ${row.item_code}`);\r\n                            }\r\n                        });\r\n                        }\r\n\r\n                        frm.refresh_field(\"sww_table\"); // Refresh the child table in the form\r\n                    }\r\n                    \r\n                }\r\n            });\r\n        }\r\n    }\r\n});\r\n\r\n\r\nfrappe.ui.form.on(\"SWW CHILD\", {\r\n    weight: function(frm, cdt, cdn) {  \r\n        let row = locals[cdt][cdn]; // Get the child table row\r\n\r\n        if (row.serial_no && row.weight) {\r\n            frappe.call({\r\n                method: \"frappe.client.set_value\",\r\n                args: {\r\n                    doctype: \"Serial No\",\r\n                    name: row.serial_no,  // Serial No document name\r\n                    fieldname: \"custom_weight\",\r\n                    value: row.weight\r\n                },\r\n                callback: function(response) {\r\n                    if (!response.exc) {\r\n                        frappe.show_alert({message: __(\"Serial No updated!\"), indicator: \"green\"});\r\n                    }\r\n                }\r\n            });\r\n        } else {\r\n            frappe.msgprint(__(\"Please ensure Serial No and Weight are set in the row.\"));\r\n        }\r\n    },\r\n    length: function(frm, cdt, cdn) {  \r\n        let row = locals[cdt][cdn]; // Get the child table row\r\n\r\n        if (row.serial_no && row.length) {\r\n            frappe.call({\r\n                method: \"frappe.client.set_value\",\r\n                args: {\r\n                    doctype: \"Serial No\",\r\n                    name: row.serial_no,  // Serial No document name\r\n                    fieldname: \"custom_length\",\r\n                    value: row.length\r\n                },\r\n                callback: function(response) {\r\n                    if (!response.exc) {\r\n                        frappe.show_alert({message: __(\"Serial No updated!\"), indicator: \"green\"});\r\n                    }\r\n                }\r\n            });\r\n        } else {\r\n            frappe.msgprint(__(\"Please ensure Serial No and Weight are set in the row.\"));\r\n        }\r\n    }\r\n});\r\n",
  "view": "Form"
 },
 {
  "docstatus": 0,
  "doctype": "Client Script",
  "dt": "Stock Entry",
  "enabled": 1,
  "modified": "2025-03-03 18:18:30.034503",
  "module": "Sonali",
  "name": "Stock entry",
  "script": "frappe.listview_settings['Stock Entry'] = {\r\n    onload: function(listview) {\r\n        listview.page.add_inner_button('Quick Stock Entry', function() {\r\n            let dialog = new frappe.ui.Dialog({\r\n                title: 'Quick Stock Entry',\r\n                fields: [\r\n                    { fieldname: 'item_code', label: 'Item Code', fieldtype: 'Link', options: 'Item', reqd: 1 },\r\n                    { fieldname: 'weight', label: 'Weight (kg)', fieldtype: 'Float', reqd: 1 },\r\n                    { fieldname: 'serial_no', label: 'Serial Number', fieldtype: 'Data', hidden: 1 },\r\n                    { fieldname: 'print_btn', fieldtype: 'Button', label: 'Print Stock Entry', hidden: 1 }\r\n                ],\r\n                primary_action_label: 'Submit',\r\n                primary_action(values) {\r\n                    frappe.call({\r\n                        method: \"sonali.custom_functions.Stock_Entry.create_and_submit_stock_entry\",\r\n                        args: {\r\n                            item_code: values.item_code,\r\n                            weight: values.weight\r\n                        },\r\n                        callback: function(response) {\r\n                            console.log(response)\r\n                            if (response.message.status === \"Submitted\") {\r\n                                let serial_no = response.message.serial_numbers.length > 0 ? response.message.serial_numbers[0] : \"N/A\";\r\n                                \r\n                                dialog.set_value('serial_no', serial_no);\r\n                                dialog.fields_dict.serial_no.df.hidden = 0;\r\n                                dialog.fields_dict.print_btn.df.hidden = 0;\r\n                                dialog.refresh();\r\n\r\n                                frappe.show_alert({\r\n                                    message:__('Stock Entry Created: ' + response.message.name),\r\n                                    indicator:'green'\r\n                                }, 3);\r\n                                \r\n                                // Format today's date as DD-MM-YYYY\r\n                                let today = new Date();\r\n                                let formatted_date = today.getDate().toString().padStart(2, '0') + \"-\" +\r\n                                                     (today.getMonth() + 1).toString().padStart(2, '0') + \"-\" +\r\n                                                     today.getFullYear();\r\n\r\n\r\n                                // Update Serial No's custom_weight field using Client Script\r\n                                if (serial_no !== \"N/A\") {\r\n                                    frappe.call({\r\n                                        method: \"frappe.client.set_value\",\r\n                                        args: {\r\n                                            doctype: \"Serial No\",\r\n                                            name: serial_no,\r\n                                            fieldname: {\r\n                                                \"custom_weight\": values.weight,\r\n                                                \"custom_mfgdate1\": formatted_date\r\n                                            }\r\n                                        },\r\n                                        callback: function(res) {\r\n                                            if (!res.exc) {\r\n                                                frappe.show_alert({\r\n                                                    message:__('Serial No updated'),\r\n                                                    indicator:'green'\r\n                                                }, 3);\r\n                                            } else {\r\n                                                frappe.msgprint(\"Failed to update Serial No.\");\r\n                                            }\r\n                                        }\r\n                                    });\r\n                                }\r\n\r\n                                // Add event to the print button\r\n                                dialog.fields_dict.print_btn.$wrapper.find('button').on('click', function() {\r\n                                    frappe.set_route(\"print\", \"Serial No\", serial_no);\r\n                                });\r\n\r\n                            } else if (response.message.error) {\r\n                                frappe.msgprint('Error: ' + response.message.error);\r\n                            }\r\n                        }\r\n                    });\r\n                }\r\n            });\r\n\r\n            dialog.show();\r\n        });\r\n    }\r\n};\r\n",
  "view": "List"
 },
 {
  "docstatus": 0,
  "doctype": "Client Script",
  "dt": "Delivery Note",
  "enabled": 1,
  "modified": "2025-03-04 17:46:03.835526",
  "module": null,
  "name": "Delivery Note grouping",
  "script": "frappe.ui.form.on(\"Delivery Note\", {\r\n    validate: function(frm) {\r\n        let grouped_items = {};\r\n\r\n        frm.doc.items.forEach(item => {\r\n            let key = item.item_code;  // Only group by item_code (not batch_no)\r\n            if (!grouped_items[key]) {\r\n                grouped_items[key] = {\r\n                    item_code: item.item_code,\r\n                    item_name: item.item_name,\r\n                    description: item.description,\r\n                    uom: item.uom,\r\n                    qty: 0,\r\n                    merged_batches: []\r\n                };\r\n            }\r\n            grouped_items[key].qty += item.qty;\r\n            grouped_items[key].merged_batches.push(item.batch_no); // Keep all batch numbers\r\n        });\r\n\r\n        // Clear table and re-add grouped rows\r\n        frm.clear_table(\"items\");\r\n        for (let key in grouped_items) {\r\n            let item = grouped_items[key];\r\n            let new_row = frm.add_child(\"items\");\r\n            new_row.item_code = item.item_code;\r\n            new_row.item_name = item.item_name;\r\n            new_row.description = item.description;\r\n            new_row.uom = item.uom;\r\n            new_row.qty = item.qty;\r\n            new_row.merged_batch_nos = item.merged_batches.join(\", \"); // Store batch numbers in new field\r\n        }\r\n\r\n        frm.refresh_field(\"items\");\r\n    }\r\n});\r\n",
  "view": "Form"
 },
 {
  "docstatus": 0,
  "doctype": "Client Script",
  "dt": "Sales Invoice",
  "enabled": 1,
  "modified": "2025-03-04 18:42:09.182290",
  "module": null,
  "name": "Fetch Weight on Sales Invoice",
  "script": "frappe.ui.form.on('Sales Invoice', {\r\n    after_save: function(frm) {\r\n        frappe.call({\r\n            method: \"sonali.custom_functions.Sales_Invoice.get_serial_and_batch_details_from_sales_invoice\",\r\n            args: {\r\n                sales_invoice: frm.doc.name\r\n            },\r\n            callback: function(response) {\r\n                if (response.message) {\r\n                    let grouped_weights = {};\r\n\r\n                    // Group weights by item_code\r\n                    response.message.forEach(item => {\r\n                        if (!grouped_weights[item.item_code]) {\r\n                            grouped_weights[item.item_code] = 0;\r\n                        }\r\n                        grouped_weights[item.item_code] += parseFloat(item.weight);\r\n                    });\r\n\r\n                    // Update the Sales Invoice Item table\r\n                    frm.doc.items.forEach(row => {\r\n                        if (grouped_weights[row.item_code]) {\r\n                            let weight = grouped_weights[row.item_code];\r\n\r\n                            // Set custom weight\r\n                            frappe.model.set_value(row.doctype, row.name, 'custom_weight_in_kg', weight);\r\n                        }\r\n                    });\r\n\r\n                    frm.refresh_field('items'); // Refresh the items table to reflect changes\r\n                }\r\n            }\r\n        });\r\n    }\r\n});\r\n\r\nfrappe.ui.form.on('Sales Invoice Item', {\r\n    custom_rate_per_kg: function(frm, cdt, cdn) {\r\n        let row = locals[cdt][cdn];\r\n        console.log(row);\r\n        rate = ( row.custom_weight_in_kg * row.custom_rate_per_kg ) / row.qty;\r\n        frappe.model.set_value(cdt, cdn, 'rate', rate);\r\n    }\r\n});",
  "view": "Form"
 }
]