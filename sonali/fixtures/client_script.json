[
 {
  "docstatus": 0,
  "doctype": "Client Script",
  "dt": "Delivery Note",
  "enabled": 1,
  "modified": "2025-03-27 16:41:09.836449",
  "module": null,
  "name": "BATCH SCANNING IN DELIVERY NOTE",
  "script": "frappe.ui.form.on('Delivery Note', {\r\n    refresh: function(frm) {\r\n        if (!frm.fields_dict.batch_scan) {\r\n            frm.add_custom_button(__('Scan Batch'), function() {\r\n                frappe.prompt({\r\n                    label: 'Scan or Enter Batch No',\r\n                    fieldname: 'batch_no',\r\n                    fieldtype: 'Data'\r\n                }, function(values) {\r\n                    if (values.batch_no) {\r\n                        fetch_and_scan_serials(frm, values.batch_no);\r\n                    }\r\n                }, __('Batch Scan'), __('OK'));\r\n            });\r\n        }\r\n    }\r\n});\r\n\r\n// Fetch serial numbers linked to the batch and simulate scanning\r\nfunction fetch_and_scan_serials(frm, batch_no) {\r\n    frappe.call({\r\n        method: \"frappe.client.get_list\",\r\n        args: {\r\n            doctype: \"Serial No\",\r\n            filters: { batch_no: batch_no, status: \"Active\" }, // Fetch only active serials\r\n            fields: [\"name\"],\r\n            limit_page_length: 100\r\n        },\r\n        callback: function(response) {\r\n            if (response.message.length) {\r\n                let serial_nos = response.message.map(s => s.name);\r\n                \r\n                // Simulate scanning each serial number one by one\r\n                serial_nos.forEach((serial, index) => {\r\n                    setTimeout(() => {\r\n                        frm.set_value(\"scan_barcode\", serial);\r\n                        frm.script_manager.trigger(\"scan_barcode\");\r\n                    }, index * 500); // Delay each scan by 500ms to mimic manual scanning\r\n                });\r\n\r\n                frappe.msgprint(`Simulating scan of ${serial_nos.length} serial numbers from Batch No ${batch_no}.`);\r\n            } else {\r\n                frappe.msgprint(`No active serial numbers found for Batch No ${batch_no}.`);\r\n            }\r\n        }\r\n    });\r\n}\r\n",
  "view": "Form"
 },
 {
  "docstatus": 0,
  "doctype": "Client Script",
  "dt": "Work Order",
  "enabled": 1,
  "modified": "2024-11-22 10:43:38.415711",
  "module": "Sonali",
  "name": "Defaults in Work Order",
  "script": "frappe.ui.form.on('Work Order', {\r\n    before_save: function(frm) {\r\n        // Loop through each row in the Operations child table\r\n        frm.doc.operations.forEach(row => {\r\n            if (!row.workstation) { // Only set if workstation is not already defined\r\n                row.workstation = \"Work - 3\"; // Replace with your default workstation name\r\n            }\r\n        });\r\n        frm.refresh_field('operations'); // Refresh the table to reflect changes\r\n    }\r\n});",
  "view": "Form"
 },
 {
  "docstatus": 0,
  "doctype": "Client Script",
  "dt": "Job Card",
  "enabled": 1,
  "modified": "2024-12-12 12:22:50.274980",
  "module": "Sonali",
  "name": "Dynamic Filtering on link field on Job card",
  "script": "frappe.ui.form.on(\"Job Card\", {\r\n    refresh: function(frm) {\r\n        let operation = frm.doc.operation;\r\n        if (operation === \"Packaging\") {\r\n                group = \"Packaging Team\";\r\n            } \r\n        else if (operation === \"Annealing\") {\r\n                group = \"Annealing Team\";\r\n            } \r\n        else if (operation === \"Bunching\") {\r\n                group = \"Bunching Team\";\r\n            } \r\n        else if (operation === \"Insulation\") {\r\n                group = \"Insulation Team\";\r\n            }\r\n        frm.set_query('employee', () => {\r\n    return {\r\n        filters: {\r\n            custom_employee_group: group\r\n        }\r\n    };\r\n        });\r\n    }\r\n});",
  "view": "Form"
 },
 {
  "docstatus": 0,
  "doctype": "Client Script",
  "dt": "Bulk Coupon",
  "enabled": 1,
  "modified": "2024-12-31 15:57:00.538523",
  "module": "Sonali",
  "name": "Bulk coupon code",
  "script": "frappe.listview_settings['Bulk Coupon'] = {\r\n    onload: function(listview) {\r\n        listview.page.add_inner_button(__('Create Bulk Data'), function() {\r\n            frappe.prompt([\r\n                {\r\n                    fieldname: 'number_of_coupons',\r\n                    label: 'Number of Coupons',\r\n                    fieldtype: 'Int',\r\n                    reqd: 1\r\n                },\r\n                {\r\n                    fieldname: 'coupon_amount',\r\n                    label: 'Coupon Amount',\r\n                    fieldtype: 'Int',\r\n                    reqd: 1\r\n                }\r\n            ], function(values) {\r\n                frappe.call({\r\n                    method: 'sonali.custom_functions.Bulk_coupon.create_bulk_data',\r\n                    args: {\r\n                        number_of_coupons: values.number_of_coupons,\r\n                        coupon_amount: values.coupon_amount\r\n                    },\r\n                    callback: function(response) {\r\n                        if (response.message) {\r\n                            frappe.msgprint(__('Bulk data created successfully!'));\r\n                            listview.refresh();\r\n                        }\r\n                    }\r\n                });\r\n            }, __('Create Bulk Data'), __('Create'));\r\n        });\r\n    }\r\n};\r\n",
  "view": "List"
 },
 {
  "docstatus": 0,
  "doctype": "Client Script",
  "dt": "Packaging Batch",
  "enabled": 1,
  "modified": "2025-03-24 10:29:46.082963",
  "module": null,
  "name": "Fetch Item Price on Packaging",
  "script": "frappe.ui.form.on('Packaging Batch', {\r\n    item_name: function(frm) {  // Trigger when item_name is selected/changed\r\n        if (!frm.doc.item_name) return; // Ensure item_name is not empty\r\n\r\n        frappe.call({\r\n            method: \"frappe.client.get_value\",\r\n            args: {\r\n                doctype: \"Item Price\",\r\n                filters: {\r\n                    item_code: frm.doc.item_name,  // Ensure item_name is actually the Item Code\r\n                    selling: 1 // Fetch selling price only\r\n                },\r\n                fieldname: \"price_list_rate\"\r\n            },\r\n            callback: function(r) {\r\n                if (r.message) {\r\n                    frm.set_value(\"item_price\", r.message.price_list_rate); // Set the fetched price\r\n                    frm.refresh_field(\"item_price\"); // Ensure UI updates\r\n                    console.log(\"Price Updated:\", r.message.price_list_rate);\r\n                } else {\r\n                    frappe.msgprint(__(\"No Price Found for the selected Item\"));\r\n                }\r\n            }\r\n        });\r\n    },\r\n    scan_barcode: function(frm) {\r\n    let barcode = frm.doc.scan_barcode;\r\n    if (!barcode) return;\r\n\r\n    // Add barcode to serial_nos table\r\n    let exists = frm.doc.serial_nos.some(row => row.serial_no === barcode);\r\n\r\n    if (!exists) {\r\n        let new_row = frm.add_child(\"serial_nos\", {\r\n            serial_no: barcode\r\n        });\r\n        frm.refresh_field(\"serial_nos\"); // Refresh child table to show new entry\r\n    } else {\r\n        frappe.msgprint(__(\"This barcode is already scanned.\"));\r\n    }\r\n\r\n    frm.set_value(\"scan_barcode\", \"\"); // Clear barcode field after scanning\r\n},\r\n// onload: function(frm) {\r\n//         frm.set_query(\"item_name\", function() {\r\n//             return {\r\n//                 filters: [\r\n//                     [\"Item\", \"item_name\", \"like\", \"%MB%\"]\r\n//                 ]\r\n//             };\r\n//         });\r\n// }\r\n\r\n});\r\n",
  "view": "Form"
 },
 {
  "docstatus": 0,
  "doctype": "Client Script",
  "dt": "HW PACKING",
  "enabled": 1,
  "modified": "2025-02-27 15:09:30.709319",
  "module": null,
  "name": "HW LABEL PRINT",
  "script": "frappe.ui.form.on('HW PACKING', {\r\n    work_order: function(frm) {\r\n        console.log(\"triggered\")\r\n        if (frm.doc.work_order) {\r\n            frappe.call({\r\n                method: \"sonali.sonali.doctype.hw_packing.hw_packing.fetch_stock_entries\",\r\n                args: {\r\n                    work_order: frm.doc.work_order\r\n                },\r\n                callback: function(r) {\r\n                    if (r.message) {\r\n                        console.log(r.message)\r\n                        frm.clear_table(\"batch_bundle_table\"); // Replace with your child table fieldname\r\n                        r.message.forEach(row => {\r\n                            let child = frm.add_child(\"batch_bundle_table\");\r\n                            child.batch_no = row.batch_no;\r\n                            child.item_code = row.item_code;\r\n                            child.quantity = row.quantity;\r\n                        });\r\n                        frm.refresh_field(\"batch_bundle_table\");\r\n                    }\r\n                }\r\n            });\r\n        }\r\n    }\r\n});",
  "view": "Form"
 },
 {
  "docstatus": 0,
  "doctype": "Client Script",
  "dt": "SWW PACKING",
  "enabled": 1,
  "modified": "2025-02-27 20:07:11.680426",
  "module": null,
  "name": "SWW LABEL PRINT",
  "script": "frappe.ui.form.on('SWW PACKING', {\r\n    sww_work_order: function(frm) {\r\n        if (frm.doc.sww_work_order) {\r\n            frappe.call({\r\n                method: \"sonali.sonali.doctype.sww_packing.sww_packing.fetch_stock_entries\",\r\n                args: {\r\n                    work_order: frm.doc.sww_work_order\r\n                },\r\n                callback: function(r) {\r\n                    if (r.message) {\r\n                        console.log(r.message[0])\r\n                        frm.clear_table(\"sww_table\");\r\n                        \r\n                        if(r.message[0].total_qty > 0)\r\n                        {\r\n                            test = 0;\r\n                            n = -1;\r\n                            r.message[1].serial_nos.forEach(row => {\r\n                                if(test % 4 == 0)\r\n                                {\r\n                                    n = n+1\r\n                                }\r\n                                if (row) {\r\n                                        test = test + 1;\r\n                                        let child = frm.add_child(\"sww_table\");\r\n                                        child.serial_no = row;\r\n                                        child.master_box = r.message[0].serial_nos[n];\r\n                                        child.weight = \"\";\r\n                                        child.length = \"\";\r\n                                } else {\r\n                                    console.warn(`No serial numbers found for item: ${row.item_code}`);\r\n                                }\r\n                                console.log(n, r.message[0].serial_nos[n])\r\n                            });\r\n                        }\r\n                        if(r.message[1].total_qty > 0)\r\n                        {\r\n                            test = 0;\r\n                            n = -1;\r\n                            r.message[0].serial_nos.forEach(row => {\r\n                                if(test % 4 == 0)\r\n                                {\r\n                                    n = n+1\r\n                                }\r\n                            if (row) {\r\n                                    let child = frm.add_child(\"sww_table\");\r\n                                    child.serial_no = row;\r\n                                    child.master_box = r.message[1].serial_nos[n];\r\n                                    child.weight = \"\";\r\n                                    child.length = \"\";\r\n                            } else {\r\n                                console.warn(`No serial numbers found for item: ${row.item_code}`);\r\n                            }\r\n                        });\r\n                        }\r\n\r\n                        frm.refresh_field(\"sww_table\"); // Refresh the child table in the form\r\n                    }\r\n                    \r\n                }\r\n            });\r\n        }\r\n    }\r\n});\r\n\r\n\r\nfrappe.ui.form.on(\"SWW CHILD\", {\r\n    weight: function(frm, cdt, cdn) {  \r\n        let row = locals[cdt][cdn]; // Get the child table row\r\n\r\n        if (row.serial_no && row.weight) {\r\n            frappe.call({\r\n                method: \"frappe.client.set_value\",\r\n                args: {\r\n                    doctype: \"Serial No\",\r\n                    name: row.serial_no,  // Serial No document name\r\n                    fieldname: \"custom_weight\",\r\n                    value: row.weight\r\n                },\r\n                callback: function(response) {\r\n                    if (!response.exc) {\r\n                        frappe.show_alert({message: __(\"Serial No updated!\"), indicator: \"green\"});\r\n                    }\r\n                }\r\n            });\r\n        } else {\r\n            frappe.msgprint(__(\"Please ensure Serial No and Weight are set in the row.\"));\r\n        }\r\n    },\r\n    length: function(frm, cdt, cdn) {  \r\n        let row = locals[cdt][cdn]; // Get the child table row\r\n\r\n        if (row.serial_no && row.length) {\r\n            frappe.call({\r\n                method: \"frappe.client.set_value\",\r\n                args: {\r\n                    doctype: \"Serial No\",\r\n                    name: row.serial_no,  // Serial No document name\r\n                    fieldname: \"custom_length\",\r\n                    value: row.length\r\n                },\r\n                callback: function(response) {\r\n                    if (!response.exc) {\r\n                        frappe.show_alert({message: __(\"Serial No updated!\"), indicator: \"green\"});\r\n                    }\r\n                }\r\n            });\r\n        } else {\r\n            frappe.msgprint(__(\"Please ensure Serial No and Weight are set in the row.\"));\r\n        }\r\n    }\r\n});\r\n",
  "view": "Form"
 },
 {
  "docstatus": 0,
  "doctype": "Client Script",
  "dt": "Sales Invoice",
  "enabled": 0,
  "modified": "2025-04-09 17:01:21.955833",
  "module": "Sonali",
  "name": "Fetch Weight on Sales Invoice",
  "script": "frappe.ui.form.on(\"Sales Invoice\", {\n    after_save: function(frm) {\n        if (frm.doc.docstatus !== 0) {  // 0 = Draft, 1 = Submitted\n            frappe.msgprint(__(\"Cannot update a submitted Sales Invoice\"));\n            return;\n        }\n\n        frappe.call({\n            method: \"sonali.custom_functions.get_delivery_note_weights.get_delivery_note_weights\",\n            args: {\n                sales_invoice: frm.doc.name\n            },\n            callback: function(response) {\n                console.log(\"Response from Server:\", response);\n                if (response.message.updated_items) {\n                    frm.refresh_field(\"items\");\n                }\n            }\n        });\n    }\n});\nfrappe.ui.form.on('Sales Invoice Item', {\n    custom_rate_per_kg: function(frm, cdt, cdn) {\n        let row = locals[cdt][cdn];\n        console.log(row);\n        rate = ( row.custom_weight_in_kg * row.custom_rate_per_kg ) / row.qty;\n        frappe.model.set_value(cdt, cdn, 'rate', rate);\n    }\n});",
  "view": "Form"
 },
 {
  "docstatus": 0,
  "doctype": "Client Script",
  "dt": "Delivery Note",
  "enabled": 1,
  "modified": "2025-04-28 15:07:52.225879",
  "module": "Sonali",
  "name": "Delivery Note ungrouping",
  "script": "frappe.ui.form.on(\"Delivery Note\", {\n    scan_barcode: function (frm) {\n        let barcode = frm.doc.scan_barcode;\n        if (!barcode) return;\n\n        frappe.call({\n            method: \"frappe.client.get_list\",\n            args: {\n                doctype: \"Serial No\",\n                filters: { name: barcode },\n                fields: [\"item_code\", \"batch_no\", \"custom_weight\", \"warehouse\", \"item_name\",\"custom_length\"]\n            },\n            callback: function (r) {\n                if (r.message && r.message.length > 0) {\n                    let serial_data = r.message[0];\n\n                    // Fetch additional details like UOM from Item Doctype\n                    frappe.call({\n                        method: \"frappe.client.get\",\n                        args: {\n                            doctype: \"Item\",\n                            name: serial_data.item_code\n                        },\n                        callback: function (item_response) {\n                            if (item_response.message) {\n                                let item = item_response.message;\n\n                                // Add a new row manually instead of grouping\n                                let new_row = frm.add_child(\"items\");\n                                new_row.item_code = serial_data.item_code;\n                                new_row.serial_no = barcode;\n                                new_row.batch_no = serial_data.batch_no || \"\";\n                                new_row.custom_weight = serial_data.custom_weight;\n                                new_row.custom_length = serial_data.custom_length;\n                                new_row.warehouse = serial_data.warehouse;\n                                new_row.qty = 1;  // Always add a new row with qty 1\n                                new_row.item_name = serial_data.item_name;\n                                new_row.uom = item.stock_uom || \"Nos\";  // Fetch UOM from Item doctype\n                                new_row.stock_uom = item.stock_uom || \"Nos\";  \n                                new_row.conversion_factor = 1;  // Default conversion factor\n\n                                frm.refresh_field(\"items\");\n                            }\n                        }\n                    });\n\n                } else {\n                    frappe.msgprint(\"Serial No not found!\");\n                }\n            }\n        });\n\n        frm.set_value(\"scan_barcode\", \"\"); // Clear barcode field after scanning\n    }\n});",
  "view": "Form"
 },
 {
  "docstatus": 0,
  "doctype": "Client Script",
  "dt": "Job Card",
  "enabled": 1,
  "modified": "2025-03-18 19:14:00.781816",
  "module": "Sonali",
  "name": "Max Qty in Dialog Box",
  "script": "frappe.ui.form.on('Job Card', {\n    refresh: function(frm) {\n        if (frm.doc.work_order) {\n            frappe.call({\n                method: 'frappe.client.get_list',\n                args: {\n                    doctype: 'Work Order',\n                    filters: { name: frm.doc.work_order },\n                    fields: ['qty', 'produced_qty']  // Fetch both fields\n                },\n                callback: function(response) {\n                    if (response.message && response.message.length > 0) {\n                        let work_order_data = response.message[0];\n                        let calculated_max_qty = (work_order_data.qty || 0) - (work_order_data.produced_qty || 0);\n                        \n                        frm.set_value('custom_max_qty', calculated_max_qty);\n                    }\n                }\n            });\n        }\n    }\n});\n",
  "view": "Form"
 },
 {
  "docstatus": 0,
  "doctype": "Client Script",
  "dt": "Stock Entry",
  "enabled": 0,
  "modified": "2025-03-21 12:39:07.976963",
  "module": null,
  "name": "SWW Stock Entry",
  "script": "frappe.listview_settings['Stock Entry'] = {\r\n    onload: function(listview) {\r\n        listview.page.add_inner_button('SWW SMALL BOX', function() {\r\n            let dialog = new frappe.ui.Dialog({\r\n                title: 'Quick Stock Entry',\r\n                fields: [\r\n                    { fieldname: 'item_code', label: 'Item Code', fieldtype: 'Link', options: 'Item', reqd: 1, get_query: function() {\r\n                            return {\r\n                                filters: {\r\n                                    \"item_group\": \"Products\" // Filter to show only items from \"Products\" group\r\n                                }\r\n                            };\r\n                        } },\r\n                    { fieldname: 'weight', label: 'Weight (kg)', fieldtype: 'Float', reqd: 1 },\r\n                    { fieldname: 'serial_no', label: 'Serial Number', fieldtype: 'Data', hidden: 1 },\r\n                    { fieldname: 'print_btn', fieldtype: 'Button', label: 'Print Stock Entry', hidden: 1 }\r\n                ],\r\n                primary_action_label: 'Submit',\r\n                primary_action(values) {\r\n                    frappe.call({\r\n                        method: \"sonali.custom_functions.Stock_Entry.create_and_submit_stock_entry\",\r\n                        args: {\r\n                            item_code: values.item_code,\r\n                            weight: values.weight\r\n                        },\r\n                        callback: function(response) {\r\n                            console.log(response)\r\n                            if (response.message.status === \"Submitted\") {\r\n                                let serial_no = response.message.serial_numbers.length > 0 ? response.message.serial_numbers[0] : \"N/A\";\r\n                                \r\n                                dialog.set_value('serial_no', serial_no);\r\n                                dialog.fields_dict.serial_no.df.hidden = 0;\r\n                                dialog.fields_dict.print_btn.df.hidden = 0;\r\n                                dialog.refresh();\r\n\r\n                                frappe.show_alert({\r\n                                    message:__('Stock Entry Created: ' + response.message.name),\r\n                                    indicator:'green'\r\n                                }, 3);\r\n                                \r\n                                // Format today's date as DD-MM-YYYY\r\n                                let today = new Date();\r\n                                let formatted_date = today.getDate().toString().padStart(2, '0') + \"-\" +\r\n                                                     (today.getMonth() + 1).toString().padStart(2, '0') + \"-\" +\r\n                                                     today.getFullYear();\r\n\r\n\r\n                                // Update Serial No's custom_weight field using Client Script\r\n                                if (serial_no !== \"N/A\") {\r\n                                    frappe.call({\r\n                                        method: \"frappe.client.set_value\",\r\n                                        args: {\r\n                                            doctype: \"Serial No\",\r\n                                            name: serial_no,\r\n                                            fieldname: {\r\n                                                \"custom_weight\": values.weight,\r\n                                                \"custom_mfgdate1\": formatted_date\r\n                                            }\r\n                                        },\r\n                                        callback: function(res) {\r\n                                            if (!res.exc) {\r\n                                                frappe.show_alert({\r\n                                                    message:__('Serial No updated'),\r\n                                                    indicator:'green'\r\n                                                }, 3);\r\n                                            } else {\r\n                                                frappe.msgprint(\"Failed to update Serial No.\");\r\n                                            }\r\n                                        }\r\n                                    });\r\n                                }\r\n\r\n                                // Add event to the print button\r\n                                dialog.fields_dict.print_btn.$wrapper.find('button').on('click', function() {\r\n                                    frappe.set_route(\"print\", \"Serial No\", serial_no);\r\n                                });\r\n\r\n                            } else if (response.message.error) {\r\n                                frappe.msgprint('Error: ' + response.message.error);\r\n                            }\r\n                        }\r\n                    });\r\n                }\r\n            });\r\n\r\n            dialog.show();\r\n        });\r\n    }\r\n};\r\n",
  "view": "List"
 },
 {
  "docstatus": 0,
  "doctype": "Client Script",
  "dt": "Stock Entry",
  "enabled": 0,
  "modified": "2025-03-18 15:45:04.626427",
  "module": null,
  "name": "HW Stock Entry",
  "script": "frappe.listview_settings['Stock Entry'] = {\r\n    onload: function(listview) {\r\n        listview.page.add_inner_button('HW SMALL BOX', function() {\r\n            let dialog = new frappe.ui.Dialog({\r\n                title: 'Quick Stock Entry',\r\n                fields: [\r\n                    { fieldname: 'item_code', label: 'Item Code', fieldtype: 'Link', options: 'Item', reqd: 1, get_query: function() {\r\n                            return {\r\n                                filters: {\r\n                                    \"item_group\": \"Products\" // Filter to show only items from \"Products\" group\r\n                                }\r\n                            };\r\n                        } },\r\n                    { fieldname: 'length', label: 'Length (Meter)', fieldtype: 'Float', reqd: 1, default: '90' },\r\n                    { fieldname: 'serial_no', label: 'Serial Number', fieldtype: 'Data', hidden: 1 },\r\n                    { fieldname: 'print_btn', fieldtype: 'Button', label: 'Print Stock Entry', hidden: 1 }\r\n                ],\r\n                primary_action_label: 'Submit',\r\n                primary_action(values) {\r\n                    frappe.call({\r\n                        method: \"sonali.custom_functions.Stock_Entry.create_and_submit_stock_entry\",\r\n                        args: {\r\n                            item_code: values.item_code,\r\n                            length: values.length\r\n                        },\r\n                        callback: function(response) {\r\n                            console.log(response)\r\n                            if (response.message.status === \"Submitted\") {\r\n                                let serial_no = response.message.serial_numbers.length > 0 ? response.message.serial_numbers[0] : \"N/A\";\r\n                                \r\n                                dialog.set_value('serial_no', serial_no);\r\n                                dialog.fields_dict.serial_no.df.hidden = 0;\r\n                                dialog.fields_dict.print_btn.df.hidden = 0;\r\n                                dialog.refresh();\r\n\r\n                                frappe.show_alert({\r\n                                    message:__('Stock Entry Created: ' + response.message.name),\r\n                                    indicator:'green'\r\n                                }, 3);\r\n                                \r\n                                // Format today's date as DD-MM-YYYY\r\n                                let today = new Date();\r\n                                let formatted_date = today.getDate().toString().padStart(2, '0') + \"-\" +\r\n                                                     (today.getMonth() + 1).toString().padStart(2, '0') + \"-\" +\r\n                                                     today.getFullYear();\r\n\r\n\r\n                                // Update Serial No's custom_weight field using Client Script\r\n                                if (serial_no !== \"N/A\") {\r\n                                    frappe.call({\r\n                                        method: \"frappe.client.set_value\",\r\n                                        args: {\r\n                                            doctype: \"Serial No\",\r\n                                            name: serial_no,\r\n                                            fieldname: {\r\n                                                \"custom_length\": values.length,\r\n                                                \"custom_mfgdate1\": formatted_date\r\n                                            }\r\n                                        },\r\n                                        callback: function(res) {\r\n                                            if (!res.exc) {\r\n                                                frappe.show_alert({\r\n                                                    message:__('Serial No updated'),\r\n                                                    indicator:'green'\r\n                                                }, 3);\r\n                                            } else {\r\n                                                frappe.msgprint(\"Failed to update Serial No.\");\r\n                                            }\r\n                                        }\r\n                                    });\r\n                                }\r\n\r\n                                // Add event to the print button\r\n                                dialog.fields_dict.print_btn.$wrapper.find('button').on('click', function() {\r\n                                    frappe.set_route(\"print\", \"Serial No\", serial_no);\r\n                                });\r\n\r\n                            } else if (response.message.error) {\r\n                                frappe.msgprint('Error: ' + response.message.error);\r\n                            }\r\n                        }\r\n                    });\r\n                }\r\n            });\r\n\r\n            dialog.show();\r\n        });\r\n    }\r\n};\r\n",
  "view": "Form"
 },
 {
  "docstatus": 0,
  "doctype": "Client Script",
  "dt": "Work Order",
  "enabled": 1,
  "modified": "2025-04-25 10:06:20.337446",
  "module": "Sonali",
  "name": "Print Serial No",
  "script": "frappe.ui.form.on('Work Order', {\n    refresh: function(frm) {\n        if (!frm.is_new()) {\n            frm.add_custom_button(__('HW Packing'), function() {\n                let print_url = `/printview?doctype=Work Order&name=${frm.doc.name}&format=SON Printing&no_letterhead=0`;\n                window.open(print_url, \"_blank\");\n            }, __(\"Create\"));\n        }\n    }\n});\n",
  "view": "Form"
 },
 {
  "docstatus": 0,
  "doctype": "Client Script",
  "dt": "Sales Invoice",
  "enabled": 1,
  "modified": "2025-05-06 11:11:10.318027",
  "module": "Sonali",
  "name": "Sales Invoice  - Delivery Note",
  "script": "frappe.ui.form.on('Sales Invoice', {\n    after_save: function(frm) {\n        console.log(\"After Save triggered for Sales Invoice:\", frm.doc.name);\n\n        // Flag to ensure the form is saved only once\n        if (frm.is_saved) return;\n\n        // Set the flag to true to prevent repeated saves\n        frm.is_saved = true;\n\n        frappe.call({\n            method: \"sonali.custom_functions.get_delivery_note_weights.get_delivery_note_weights\",\n            args: {\n                sales_invoice: frm.doc.name\n            },\n            callback: function(response) {\n                if (response.message && response.message.updated_items) {\n\n                    let items_map = {};\n\n                    // Log updated_items to debug missing fields\n                    console.log(\"Updated Items:\", response.message.updated_items);\n\n                    response.message.updated_items.forEach(item => {\n                        let key = item.item_code + '-' + (item.uom || '');\n\n                        if (items_map[key]) {\n                            items_map[key].qty += item.qty || 0;\n                            items_map[key].custom_weight_in_kg += item.custom_weight_in_kg || 0;\n                            items_map[key].custom_length_in_meter += item.custom_length_in_meter || 0;\n                        } else {\n                            items_map[key] = {\n                                item_code: item.item_code,\n                                uom: item.uom || 'Nos',  // Default UOM, ensure this is a valid UOM in your system\n                                qty: item.qty || 0,\n                                custom_weight_in_kg: item.custom_weight_in_kg || 0,\n                                custom_length_in_meter: item.custom_length_in_meter || 0,\n                                delivery_note: item.delivery_note\n                            };\n                        }\n                    });\n\n                    // ⚡ Clear items properly\n                    frm.clear_table(\"items\");\n\n                    // Add merged items\n                    for (let key in items_map) {\n                        let merged_item = items_map[key];\n\n                        // Ensure both item_code and uom are provided\n                        if (!merged_item.item_code || !merged_item.uom) {\n                            console.log(\"Skipping row: Missing item_code or uom\", merged_item);\n                            continue; // Skip if mandatory fields are missing\n                        }\n\n                        // Fetch item details to get the item_name and validate UOM\n                        frappe.call({\n                            method: \"frappe.client.get\",\n                            args: {\n                                doctype: \"Item\",\n                                name: merged_item.item_code\n                            },\n                            callback: function(item_details) {\n                                if (item_details.message) {\n                                    // Set the item_name from the Item document\n                                    merged_item.item_name = item_details.message.item_name || merged_item.item_code;\n\n                                    // Set the income account as \"Sales - S\"\n                                    let income_account = \"Sales - S\";  // Corrected income account\n\n                                    let child = frm.add_child(\"items\");\n                                    child.item_code = merged_item.item_code;\n                                    child.item_name = merged_item.item_name;  // Set the item_name here\n                                    child.uom = merged_item.uom;\n                                    // child.qty = merged_item.qty;\n                                    child.custom_weight_in_kg = merged_item.custom_weight_in_kg;\n                                    child.custom_length_in_meter = merged_item.custom_length_in_meter;\n                                    if(merged_item.custom_weight_in_kg > 0)\n                                    {\n                                        child.qty = merged_item.custom_weight_in_kg;\n                                    }\n                                    else if(merged_item.custom_length_in_meter > 0)\n                                    {\n                                        child.qty = merged_item.custom_length_in_meter;\n                                    }\n                                    child.delivery_note = merged_item.delivery_note;\n                                    child.rate = 0;\n                                    child.income_account = income_account;  // Set the corrected income account here\n\n                                    frm.refresh_field(\"items\");\n                                } else {\n                                    console.log(\"Item details not found for item_code:\", merged_item.item_code);\n                                }\n                            }\n                        });\n                    }\n\n                    // ⚡ Force save once after all updates\n                    frm.save(); // This will trigger save once after the items are processed\n                }\n            }\n        });\n    }\n});\n\nfrappe.ui.form.on('Sales Invoice Item', {\n    custom_rate_per_kg: function(frm, cdt, cdn) {\n        let row = locals[cdt][cdn];\n        if (row.qty && row.custom_weight_in_kg) {\n            let rate = (row.custom_weight_in_kg * row.custom_rate_per_kg) / row.qty;\n\n            let rate_fixed = Math.floor(rate * 1000) / 1000;\n            let last_digit = Math.ceil((rate * 10000) % 10);\n\n            let final_rate = rate_fixed + (last_digit / 10000);\n            frappe.model.set_value(cdt, cdn, 'rate', final_rate);\n        }\n    },\n\n    custom_rate_per_meter: function(frm, cdt, cdn) {\n        let row = locals[cdt][cdn];\n        if (row.qty && row.custom_length_in_meter) {\n            let rate = (row.custom_length_in_meter * row.custom_rate_per_meter) / row.qty;\n\n            let rate_fixed = Math.floor(rate * 1000) / 1000;\n            let last_digit = Math.ceil((rate * 10000) % 10);\n\n            let final_rate = rate_fixed + (last_digit / 10000);\n            frappe.model.set_value(cdt, cdn, 'rate', final_rate);\n        }\n    }\n});",
  "view": "Form"
 },
 {
  "docstatus": 0,
  "doctype": "Client Script",
  "dt": "Delivery Note",
  "enabled": 1,
  "modified": "2025-03-24 15:29:08.442121",
  "module": "Sonali",
  "name": "Tax Hide in DN",
  "script": "frappe.ui.form.on('Delivery Note', {\n    refresh: function(frm) {\n        // Hide the tax and related fields\n        frm.toggle_display('taxes', false); // Hides the Taxes and Charges table\n        frm.toggle_display('taxes_and_charges', false); // Hides the Taxes and Charges Template field\n        frm.toggle_display('total_taxes_and_charges', false); // Hides the Total Taxes field\n        frm.toggle_display('tax_id', false); // Hides the Tax ID field\n        frm.toggle_display('customer', false);\n\n        // Hide section breaks\n        frm.toggle_display('pricing_rule_details', false);\n        frm.toggle_display('section_gst_breakup', false);\n        frm.toggle_display('sec_tax_breakup', false);\n        frm.toggle_display('section_break_49', false);\n        frm.toggle_display('totals', false);\n        frm.toggle_display('taxes_section', false);\n        frm.toggle_display('accounting_dimensions_section', false);\n    }\n});",
  "view": "Form"
 },
 {
  "docstatus": 0,
  "doctype": "Client Script",
  "dt": "Delivery Note",
  "enabled": 1,
  "modified": "2025-03-24 14:45:04.665253",
  "module": "Sonali",
  "name": "Customer code fetching in DN",
  "script": "frappe.ui.form.on('Delivery Note', {\n    refresh: function(frm) {\n        frm.set_query(\"custom_customer_code_1\", function() {\n            return {\n                doctype: \"Customer\",\n                filters: {\n                    \"custom_customer_code\": [\"!=\", \"\"]\n                }\n            };\n        });\n    },\n\n    custom_customer_code_1: function(frm) {\n        if (frm.doc.custom_customer_code_1) {\n            frappe.db.get_value('Customer', \n                { 'custom_customer_code': frm.doc.custom_customer_code_1 }, \n                ['name', 'customer_name', 'customer_group', 'territory', 'custom_customer_code']\n            ).then(response => {\n                if (response.message) {\n                    let customer = response.message;\n                    frm.set_value('customer', customer.name);  \n                    frm.set_value('customer_name', customer.customer_name);\n                    frm.set_value('customer_group', customer.customer_group);\n                    frm.set_value('territory', customer.territory);\n                }\n            });\n        }\n    }\n});\n",
  "view": "Form"
 },
 {
  "docstatus": 0,
  "doctype": "Client Script",
  "dt": "Stock Entry",
  "enabled": 1,
  "modified": "2025-04-25 10:04:22.794898",
  "module": "Sonali",
  "name": "3CF item Stock Entry",
  "script": "frappe.listview_settings['Stock Entry'] = {\n    onload: function(listview) {\n        console.log(\"✅ Stock Entry List View Loaded\");\n\n        // Add SWW METER STOCK button\n        listview.page.add_inner_button('QSE METER', function() {\n            console.log(\"🟢 SWW METER STOCK Button Clicked!\");\n            let dialog = new frappe.ui.Dialog({\n                title: 'Quick Stock Entry (METER)',\n                fields: [\n                    { fieldname: 'item_code', label: 'Item Code', fieldtype: 'Link', options: 'Item', reqd: 1, get_query: function() {\n                            return { filters: { \n                                        \"item_group\": [\"in\", [\"Products\"]]\n                                } };\n                        } },\n                    { fieldname: 'length', label: 'Length (m)', fieldtype: 'Float', reqd: 1 },\n                    { fieldname: 'serial_no', label: 'Serial Number', fieldtype: 'Data', hidden: 1 },\n                    { fieldname: 'print_btn', fieldtype: 'Button', label: 'Print Stock Entry', hidden: 1 }\n                ],\n                primary_action_label: 'Submit',\n                primary_action(values) {\n                    frappe.call({\n                        method: \"sonali.custom_functions.Stock_Entry.create_and_submit_stock_entry_meter\",\n                        args: { item_code: values.item_code, length: values.length },\n                        callback: function(response) {\n                            console.log(\"Response: \", response);\n                            if (response.message.status === \"Submitted\") {\n                                let serial_no = response.message.serial_numbers.length > 0 ? response.message.serial_numbers[0] : \"N/A\";\n                                dialog.set_value('serial_no', serial_no);\n                                dialog.fields_dict.serial_no.df.hidden = 0;\n                                dialog.fields_dict.print_btn.df.hidden = 0;\n                                dialog.refresh();\n\n                                frappe.show_alert({ message:__('Stock Entry Created: ' + response.message.name), indicator:'green' }, 3);\n\n                                let today = new Date();\n                                let formatted_date = today.getDate().toString().padStart(2, '0') + \"-\" +\n                                                     (today.getMonth() + 1).toString().padStart(2, '0') + \"-\" +\n                                                     today.getFullYear();\n\n                                if (serial_no !== \"N/A\") {\n                                    frappe.call({\n                                        method: \"frappe.client.set_value\",\n                                        args: {\n                                            doctype: \"Serial No\",\n                                            name: serial_no,\n                                            fieldname: { \"custom_length\": values.length, \"custom_mfgdate1\": formatted_date }\n                                        },\n                                        callback: function(res) {\n                                            if (!res.exc) {\n                                                frappe.show_alert({ message:__('Serial No updated'), indicator:'green' }, 3);\n                                            } else {\n                                                frappe.msgprint(\"Failed to update Serial No.\");\n                                            }\n                                        }\n                                    });\n                                }\n\n                                dialog.fields_dict.print_btn.$wrapper.find('button').on('click', function() {\n                                    frappe.set_route(\"print\", \"Serial No\", serial_no);\n                                });\n\n                            } else if (response.message.error) {\n                                frappe.msgprint('Error: ' + response.message.error);\n                            }\n                        }\n                    });\n                }\n            });\n\n            dialog.show();\n        });\n\n        // Add SWW SMALL BOX button\n        listview.page.add_inner_button('QSE KG', function() {\n            console.log(\"🟢 SWW SMALL BOX Button Clicked!\");\n            let dialog = new frappe.ui.Dialog({\n                title: 'Quick Stock Entry',\n                fields: [\n                    { fieldname: 'item_code', label: 'Item Code', fieldtype: 'Link', options: 'Item', reqd: 1, get_query: function() {\n                            return { filters: { \"item_group\": \"Products\" } };\n                        } },\n                    { fieldname: 'weight', label: 'Weight (kg)', fieldtype: 'Float', reqd: 1 },\n                    { fieldname: 'serial_no', label: 'Serial Number', fieldtype: 'Data', hidden: 1 },\n                    { fieldname: 'print_btn', fieldtype: 'Button', label: 'Print Stock Entry', hidden: 1 }\n                ],\n                primary_action_label: 'Submit',\n                primary_action(values) {\n                    frappe.call({\n                        method: \"sonali.custom_functions.Stock_Entry.create_and_submit_stock_entry\",\n                        args: { item_code: values.item_code, weight: values.weight },\n                        callback: function(response) {\n                            console.log(\"Response: \", response);\n                            if (response.message.status === \"Submitted\") {\n                                let serial_no = response.message.serial_numbers.length > 0 ? response.message.serial_numbers[0] : \"N/A\";\n                                dialog.set_value('serial_no', serial_no);\n                                dialog.fields_dict.serial_no.df.hidden = 0;\n                                dialog.fields_dict.print_btn.df.hidden = 0;\n                                dialog.refresh();\n\n                                frappe.show_alert({ message:__('Stock Entry Created: ' + response.message.name), indicator:'green' }, 3);\n\n                                let today = new Date();\n                                let formatted_date = today.getDate().toString().padStart(2, '0') + \"-\" +\n                                                     (today.getMonth() + 1).toString().padStart(2, '0') + \"-\" +\n                                                     today.getFullYear();\n\n                                if (serial_no !== \"N/A\") {\n                                    frappe.call({\n                                        method: \"frappe.client.set_value\",\n                                        args: {\n                                            doctype: \"Serial No\",\n                                            name: serial_no,\n                                            fieldname: { \"custom_weight\": values.weight, \"custom_mfgdate1\": formatted_date }\n                                        },\n                                        callback: function(res) {\n                                            if (!res.exc) {\n                                                frappe.show_alert({ message:__('Serial No updated'), indicator:'green' }, 3);\n                                            } else {\n                                                frappe.msgprint(\"Failed to update Serial No.\");\n                                            }\n                                        }\n                                    });\n                                }\n\n                                dialog.fields_dict.print_btn.$wrapper.find('button').on('click', function() {\n                                    frappe.set_route(\"print\", \"Serial No\", serial_no);\n                                });\n\n                            } else if (response.message.error) {\n                                frappe.msgprint('Error: ' + response.message.error);\n                            }\n                        }\n                    });\n                }\n            });\n\n            dialog.show();\n        });\n\n        console.log(\"🛠️ Both Buttons Added to Stock Entry List View.\");\n    }\n};\n",
  "view": "List"
 },
 {
  "docstatus": 0,
  "doctype": "Client Script",
  "dt": "Item",
  "enabled": 1,
  "modified": "2025-04-25 18:25:42.509878",
  "module": "Sonali",
  "name": "Replicate item METER and KG",
  "script": "frappe.ui.form.on('Item', {\n    refresh: function(frm) {\n        // Add custom \"METER\" and \"KG\" buttons to the Item form\n        frm.add_custom_button(__('METER'), function() {\n            create_item_with_suffix(frm, 'METER');\n        });\n\n        frm.add_custom_button(__('KG'), function() {\n            create_item_with_suffix(frm, 'KG');\n        });\n    }\n});\n\n// Function to create a new item with the suffix, item group change, and UOM update\nfunction create_item_with_suffix(frm, suffix) {\n    // Replicate the current item and modify the necessary fields\n    let new_item = frappe.model.copy_doc(frm.doc);\n    new_item.item_code = frm.doc.item_code + ' - ' + suffix;\n    new_item.item_name = frm.doc.item_name + ' - ' + suffix; // Update item_name\n    new_item.item_group = 'Sub Assemblies'; // Set the Item Group to Sub Assemblies\n\n    // Update stock_uom and UOMs table based on the suffix\n    new_item.stock_uom = suffix; // Set stock_uom to METER or KG\n    new_item.uoms = []; // Clear the current UOMs table completely\n\n    // Create new UOM for the new item\n    new_item.uoms.push({\n        uom: suffix, // Set UOM to METER or KG\n        conversion_factor: 1 // Set conversion factor to 1 (assuming no conversion)\n    });\n\n    // Create a new document and insert it manually\n    frappe.call({\n        method: \"frappe.client.insert\",\n        args: {\n            doc: new_item\n        },\n        callback: function(response) {\n            if (response.message) {\n                const new_doc = response.message;\n                frappe.msgprint(__('Item {0} created successfully!', [new_doc.item_code]));\n                // Optionally, you can open the new item form after creation\n                frappe.set_route('Form', 'Item', new_doc.name);\n            }\n        },\n        error: function(error) {\n            frappe.msgprint(__('Error creating item: {0}', [error.message]));\n        }\n    });\n}\n",
  "view": "Form"
 }
]